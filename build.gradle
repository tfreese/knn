plugins {
    id "de.freese.gradle.java.conventions" version "$version_myJavaConventionPlugin" apply false
    id "io.spring.dependency-management" version "$version_springDependencyManagement" apply false
}

allprojects {
    apply plugin: "base"

    ant.lifecycleLogLevel = "INFO"

    // repositories {
    //
    // }
}

subprojects {
    apply plugin: "de.freese.gradle.java.conventions"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
        }

        dependencies {
            dependency("com.lmax:disruptor:$version_disruptor")
        }
    }

    pluginManager.withPlugin("java") {
        dependencies {
            testImplementation("org.junit.jupiter:junit-jupiter")

            testRuntimeOnly("org.junit.platform:junit-platform-launcher")
        }
    }
}

// For Composite Build.
tasks.register("cleanAll", GradleBuild) {
    tasks = ["clean"]
}
tasks.register("buildAll", GradleBuild) {
    tasks = ["build"]
}

project("knn-net") {
    apply plugin: "java-library"
    description = "KÃ¼nstliches neuronales Netz (Artificial neural network)"
    dependencies {
        api("com.lmax:disruptor")
        api("io.projectreactor:reactor-core")
        api("org.slf4j:slf4j-api")
    }
}

project("knn-demo") {
    apply plugin: "application"
    description = "Demo for an artificial neural network"
    dependencies {
        implementation(project(":knn-net"))

        implementation("org.springframework:spring-jdbc")

        runtimeOnly("org.slf4j:slf4j-simple")

        // testImplementation("org.mariadb.jdbc:mariadb-java-client")
        // testImplementation("org.springframework:spring-jdbc")
    }
    ext {
        main = "de.freese.knn.buttons.KnnButtonMain"
    }
    application {
        mainClass = project.main
    }
    jar {
        manifest {
            attributes(
                    "Main-Class": project.main
            )
        }
    }
}
